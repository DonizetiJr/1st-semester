/*
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |  INICIO CODE SEGMENT
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |   FIM CODE SEGMENT
 		-----------------
		|               |   INICIO DA STACK
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |
 		-----------------
		|               |  i
		|               |
		|               |
		|               |
 		-----------------
		|               |  int result[2]
		|               |
		|               |
		|               |  -> result[0]
 		-----------------
		|               |  
		|               |
		|               |  -> result[1]
		|               |
 		-----------------
		|               |  q
		|               |
		|               |
		|               |
 		-----------------
		|               |  r
		|               |
		|               |
		|               |
 		-----------------
		|               |  n
		|               |
		|               |
		|               |   FIM DA STACK
 		-----------------
 */

#include <stdlib.h>
#include <stdio.h>

int main(int argc, char *argv[]) {

	int *result;
	int n, r, q;
	//int data[2];
	int i;

	result = (int *) malloc(sizeof(int) * 5);

	printf("Digite um n√∫mero decimal: "); 
	scanf("%d", &n); 

	i = 0;
	for (; i < 5;) {
		result[i] = 0;
		i++;
	}

	i = 0;
	while (n >= 2) { 	
		q = n / 2; 	
		r = n - (2*q); 	
		result[i] = r;
		i++; // i = i + 1;
		n = q;		
	}
	result[i] = n;

	for (i = 4; i >= 0; i--) {
		printf("%d", result[i]);
	}

	free(result);

	return 0;
}


/*
 		-----------------
       Y        |               |  HEAP SEGMENT
                |               |
                |               |  -> result[0]
                |               |
 		-----------------
                |               |
                |               |
                |               |  -> result[1]
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |
 		-----------------
                |               |   FIM DA HEAP
                -----------------
                |               |   INICIO DO SEGMENTO DE CODIGO
                |               |		
                |               |
                |               |
                |               |   int data[2]  (read-only)
                |               |
                |               |
                |               |
                -----------------
                |               |   FIM DO SEGMENTO DE CODIGO
                -----------------
                |               |   INICIO DA STACK
                -----------------
                |               |
                -----------------
                |               |
                -----------------
                |               |
                -----------------
                |               |
                -----------------
                |               |
                -----------------
                |               |  i
                |               |
                |               |
                |               |
                -----------------
                |               |  int *result (read-and-write)
                |               |
                |               |
                |      Y        |
                |               |
                |               |  result = malloc(sizeof(int) * 5);
                |               |
                |               |
                -----------------
                |               |  q
                |               |
                |               |
                |               |
                -----------------
                |               |  r
                |               |
                |               |
                |               |
                -----------------
                |               |  n
                |               |
                |               |
                |               |  FIM STACK
                -----------------

*/
